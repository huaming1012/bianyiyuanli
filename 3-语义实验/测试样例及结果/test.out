	.text
	.data
	.align	4
	.globl	N
	.type	N, @object
	.size	N, 4
N:
	.long	100
	.globl	a
	.type	a, @object
	.size	a, 400
a:
	.zero	100
	.text
	.globl	func
	.type	func, @function
func:
	pushq	%rbp
	movl	%rsp, %rbp
	subq	$12, %rsp
.L0:
	movl	8(%rbp), %rax
	pushq	%rax
	movl	$1, %rax
	popq	%rbx
	cmpq	%rax, %rbx
	sete	%al
	je		.L1
	jmp		.L4
	pushq	%rax
.L4:
	movl	8(%rbp), %rax
	pushq	%rax
	movl	$0, %rax
	popq	%rbx
	cmpq	%rax, %rbx
	sete	%al
	je		.L1
	jmp		.L2
	popq	%rbx
	orq	%rax, %rbx
	setne	%al
.L1:
	movl	$1, %rax
	jmp		.LRET_func
	jmp		.L3
.L2:
	movl	8(%rbp), %rax
	pushq	%rax
	movl	$1, %rax
	movl	%rax, %rbx
	popq	%rax
	subq	%rbx, %rax
	pushq	%rax
	call	func
	addq	$4, %rsp
	pushq	%rax
	movl	8(%rbp), %rax
	pushq	%rax
	movl	$2, %rax
	movl	%rax, %rbx
	popq	%rax
	subq	%rbx, %rax
	pushq	%rax
	call	func
	addq	$4, %rsp
	popq	%rbx
	addq	%rbx, %rax
	jmp		.LRET_func
.L3:
.LRET_func:
	addq	$12, %rsp
	popq	%ebp
	ret
	.globl	main
	.type	main, @function
main:
	pushq	%rbp
	movl	%rsp, %rbp
	subq	$16, %rsp
	movl	$10, %rax
	movl	%rax, -12(%rbp)
	movl	-12(%rbp), %rax
	pushq	%rax
	movl	$2, %rax
	popq	%rbx
	addq	%rbx, %rax
	pushq	%rax
	call	func
	addq	$4, %rsp
	pushq	%rax
	movl	$0, %rax
	popq	%rbx
	movl	%rbx, a(,%rax,4)
	movl	$0, %rax
	jmp		.LRET_main
.LRET_main:
	addq	$16, %rsp
	popq	%ebp
	ret
